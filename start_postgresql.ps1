# Script pour d√©marrer PostgreSQL avec Docker
Write-Host "üöÄ D√©marrage de PostgreSQL avec Docker..." -ForegroundColor Green

# V√©rifier si Docker est install√©
try {
    docker --version | Out-Null
    Write-Host "‚úÖ Docker est install√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    Write-Host "Veuillez installer Docker Desktop depuis https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

# V√©rifier si le conteneur existe d√©j√†
$containerExists = docker ps -a --filter "name=postgres-cocktails" --format "table {{.Names}}" | Select-String "postgres-cocktails"

if ($containerExists) {
    Write-Host "üì¶ Le conteneur postgres-cocktails existe d√©j√†" -ForegroundColor Yellow
    
    # V√©rifier si le conteneur est en cours d'ex√©cution
    $containerRunning = docker ps --filter "name=postgres-cocktails" --format "table {{.Names}}" | Select-String "postgres-cocktails"
    
    if ($containerRunning) {
        Write-Host "‚úÖ Le conteneur PostgreSQL est d√©j√† en cours d'ex√©cution" -ForegroundColor Green
    } else {
        Write-Host "üîÑ Red√©marrage du conteneur PostgreSQL..." -ForegroundColor Yellow
        docker start postgres-cocktails
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Conteneur PostgreSQL red√©marr√© avec succ√®s" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erreur lors du red√©marrage du conteneur" -ForegroundColor Red
            exit 1
        }
    }
} else {
    Write-Host "üÜï Cr√©ation d'un nouveau conteneur PostgreSQL..." -ForegroundColor Yellow
    docker run --name postgres-cocktails `
        -e POSTGRES_PASSWORD=postgres `
        -e POSTGRES_DB=cocktail_db `
        -p 5432:5432 `
        -d postgres:15
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Conteneur PostgreSQL cr√©√© et d√©marr√© avec succ√®s" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors de la cr√©ation du conteneur" -ForegroundColor Red
        exit 1
    }
}

# Attendre que PostgreSQL soit pr√™t
Write-Host "‚è≥ Attente que PostgreSQL soit pr√™t..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# V√©rifier la connexion
Write-Host "üîç V√©rification de la connexion √† PostgreSQL..." -ForegroundColor Yellow
try {
    $result = docker exec postgres-cocktails pg_isready -U postgres
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ PostgreSQL est pr√™t et accessible" -ForegroundColor Green
    } else {
        Write-Host "‚ùå PostgreSQL n'est pas encore pr√™t" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de PostgreSQL" -ForegroundColor Red
}

Write-Host ""
Write-Host "üìã Informations de connexion :" -ForegroundColor Cyan
Write-Host "   Host: localhost" -ForegroundColor White
Write-Host "   Port: 5432" -ForegroundColor White
Write-Host "   Database: cocktail_db" -ForegroundColor White
Write-Host "   Username: postgres" -ForegroundColor White
Write-Host "   Password: postgres" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ Vous pouvez maintenant d√©marrer votre application Spring Boot !" -ForegroundColor Green
Write-Host "   Commande: mvn spring-boot:run" -ForegroundColor Cyan 